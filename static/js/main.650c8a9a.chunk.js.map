{"version":3,"sources":["store/SquaresStore.js","components/Game.jsx","api/baseUrl.js","components/HoverSquaresList.jsx","App.js","index.js"],"names":["squares","makeObservable","this","observable","runInAction","arrayRowIndex","arrayColIndex","refItem","hovered","Game","observer","useState","difficulties","setDifficulties","selectValue","setSelectValue","error","setError","getDifficulties","a","fetch","res","json","resJson","console","log","onHandleHover","useCallback","SquaresStore","updateSquares","useEffect","GameContainer","GameHeader","CustomSelect","value","onChange","e","target","disabled","Object","keys","length","hidden","map","key","index","field","ButtonStart","onClick","num","countFromOne","matrix","Array","fill","row","rowIndex","col","colIndex","id","setSquares","createGameMatrix","JSON","parse","ErrorText","GameBody","setBorder","SquaresRow","Square","onMouseEnter","styled","div","props","select","button","span","HoverSquaresList","ListContainer","Title","List","ListItem","h1","App","className","MainContainer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.650c8a9a.chunk.js","sourcesContent":["import { makeObservable, observable, runInAction } from \"mobx\";\r\n\r\nexport class SquareStore {\r\n  squares = [];\r\n\r\n  constructor() {\r\n    makeObservable(this, {\r\n      squares: observable,\r\n    });\r\n  };\r\n\r\n  setSquares(squares) {\r\n    runInAction(() => {\r\n      this.squares = squares;\r\n    });\r\n  }\r\n\r\n  updateSquares(arrayRowIndex, arrayColIndex) {\r\n    const refItem = this.squares[arrayRowIndex][arrayColIndex];\r\n\r\n    runInAction(() => {\r\n      refItem.hovered = !refItem.hovered;\r\n    });\r\n  };\r\n\r\n};\r\n\r\nexport default new SquareStore();\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { baseUrl } from '../api/baseUrl';\r\nimport { observer } from 'mobx-react-lite';\r\nimport SquaresStore from '../store/SquaresStore';\r\n\r\nconst Game = observer(() => {\r\n  const [difficulties, setDifficulties] = useState({});\r\n  const [selectValue, setSelectValue] = useState(\"\");\r\n  const [error, setError] = useState(false); // for validation of select\r\n\r\n  const getDifficulties = async () => {\r\n    try {\r\n      const res = await fetch(baseUrl);\r\n      const resJson = await res.json();\r\n      setDifficulties(resJson);\r\n    } catch (error) {\r\n      console.log(error);\r\n    };\r\n  };\r\n\r\n  const createGameMatrix = (num) => {\r\n    let countFromOne = 1;\r\n    const rows = new Array(num).fill(0);\r\n\r\n    const matrix = rows.map((row, rowIndex) => {\r\n      return new Array(num).fill(0).map((col, colIndex) => {\r\n        return {\r\n          id: countFromOne++,\r\n          rowIndex: rowIndex + 1,\r\n          colIndex: colIndex + 1,\r\n          hovered: false\r\n        }\r\n      })\r\n    });\r\n\r\n    SquaresStore.setSquares(matrix);\r\n  };\r\n\r\n  const onHandleSelectChange = (e) => {\r\n    const { value } = e.target;\r\n    setSelectValue(value);\r\n    setError(false);\r\n  };\r\n\r\n  const onHandleHover = useCallback((arrayRowIndex, arrayColIndex) => {\r\n    SquaresStore.updateSquares(arrayRowIndex, arrayColIndex)\r\n  }, []);\r\n\r\n  const startGame = () => {\r\n    selectValue ? createGameMatrix(JSON.parse(selectValue)) : setError(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getDifficulties();\r\n  }, []);\r\n\r\n  return (\r\n    <GameContainer>\r\n      <GameHeader>\r\n        <CustomSelect\r\n          value={selectValue}\r\n          onChange={onHandleSelectChange}\r\n          error={error}\r\n          disabled={!Object.keys(difficulties).length > 0}\r\n        >\r\n          <option value=\"\" hidden>\r\n            Pick mode\r\n          </option>\r\n          {\r\n            Object.keys(difficulties).map((key, index) => (\r\n              <option key={key + index} value={difficulties[key].field}>{`${key} - ${difficulties[key].field} fields`}</option>\r\n            ))\r\n          }\r\n        </CustomSelect>\r\n        <ButtonStart onClick={startGame}>START</ButtonStart>\r\n        <ErrorText error={error}>Choose mode!</ErrorText>\r\n      </GameHeader>\r\n      <GameBody setBorder={SquaresStore.squares.length > 0}>\r\n        {\r\n          SquaresStore.squares.map((row, arrayRowIndex) => {\r\n            return (\r\n              <SquaresRow key={`row-${arrayRowIndex}`}>\r\n                {\r\n                  row.map(({ id, hovered }, arrayColIndex) => (\r\n                    <Square\r\n                      key={id}\r\n                      onMouseEnter={() => onHandleHover(arrayRowIndex, arrayColIndex)}\r\n                      hovered={hovered}\r\n                    />\r\n                  ))\r\n                }\r\n              </SquaresRow>\r\n            )\r\n          })\r\n        }\r\n      </GameBody>\r\n    </GameContainer>\r\n  )\r\n});\r\n\r\nexport default Game;\r\n\r\nconst GameContainer = styled.div`\r\n  display: block;\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst GameHeader = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 27px;\r\n`;\r\n\r\nconst GameBody = styled.div`\r\n  min-width: 250px;\r\n  border: ${({ setBorder }) => setBorder ? '1px solid black' : 'none'};\r\n`;\r\n\r\nconst SquaresRow = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Square = styled.div`\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 1px solid black;\r\n  background-color: ${(props) => props.hovered ? '#03a8f4' : 'transparent'};\r\n`;\r\n\r\nconst CustomSelect = styled.select`\r\n  font-family: 'Roboto', sans-serif;\r\n  /* font-weight: 500; */\r\n  position: relative;\r\n  width: 68%;\r\n  height: 30px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  border-color: ${({ error }) => error ? 'red' : '#1f1f1f'};\r\n  padding: 0 8px;\r\n  -moz-appearance: none; \r\n  -webkit-appearance: none;\r\n  appearance:none;\r\n\r\n  // for custom arrow icon\r\n  background-image: url(\"data:image/svg+xml;utf8,<svg fill='black' height='24' viewBox='0 0 24 24' width='24' xmlns='http://www.w3.org/2000/svg'><path d='M7 10l5 5 5-5z'/><path d='M0 0h24v24H0z' fill='none'/></svg>\");\r\n  background-repeat: no-repeat;\r\n  background-position-x: 100%;\r\n  background-position-y: 2px;\r\n\r\n  /* & option {\r\n    font-weight: 500;\r\n  } */\r\n`;\r\n\r\nconst ButtonStart = styled.button`\r\n  font-family: 'Roboto', sans-serif;\r\n  font-weight: 500;\r\n  font-size: 15px;\r\n  width: 30%;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 7px;\r\n  color: #fff;\r\n  background-color: rgb(0, 117, 216);\r\n  cursor: pointer;\r\n  outline: none;\r\n  &:hover {\r\n    background-color: rgb(0, 98, 184);\r\n  }\r\n`;\r\n\r\nconst ErrorText = styled.span`\r\n  font-family: 'Roboto',sans-serif;\r\n  font-size: 11px;\r\n  font-weight: bold;\r\n  position: absolute;\r\n  top: 110%;\r\n  color: ${({error}) => error ? 'red' : 'transparent'}; // it will help to load font, and keep ready to show.\r\n`;\r\n","export const baseUrl = 'http://demo1030918.mockable.io/';","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { observer } from 'mobx-react-lite';\r\nimport SquaresStore from '../store/SquaresStore';\r\n\r\nconst HoverSquaresList = observer(() => {\r\n  return (\r\n    <>\r\n      {\r\n        SquaresStore.squares.length > 0 ?\r\n          <ListContainer>\r\n            <Title>Hover squares</Title>\r\n            <List>\r\n              {\r\n                SquaresStore.squares.map(row => {\r\n                  return row.map(({ id, rowIndex, colIndex, hovered }) => (\r\n                    hovered ? <ListItem key={id} >row {rowIndex} col {colIndex}</ListItem> : null\r\n                  ))\r\n                })\r\n              }\r\n            </List>\r\n\r\n          </ListContainer>\r\n          :\r\n          null\r\n      }\r\n    </>\r\n  );\r\n});\r\n\r\nexport default HoverSquaresList;\r\n\r\nconst ListContainer = styled.div`\r\n  margin-right: 10px;\r\n  margin-left: 50px;\r\n`;\r\n\r\nconst List = styled.div`\r\n  padding-bottom: 10px;\r\n  padding-right: 10px;\r\n  height: calc(100vh - 90px);\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst ListItem = styled.div`\r\n  font-family: 'Roboto', sans-serif;\r\n  font-weight: bold;\r\n  margin: 5px 0;\r\n  padding: 15px 5px;\r\n  border: 2px solid #fbefd6;\r\n  border-radius: 7px;\r\n  color: #896d3a;\r\n  background-color: #fbf8e3;\r\n  white-space: nowrap;\r\n`;\r\n\r\nconst Title = styled.h1`\r\n  font-family: 'Roboto', sans-serif;\r\n  font-weight: bold;\r\n  line-height: 33px;\r\n  margin-bottom: 15px;\r\n  `;\r\n","import styled from \"styled-components\";\nimport Game from \"./components/Game\";\nimport HoverSquaresList from \"./components/HoverSquaresList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainContainer>\n        <Game/>\n        <HoverSquaresList/>\n      </MainContainer>\n    </div>\n  );\n}\n\nexport default App;\n\nconst MainContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 70%;\n  margin: 0 auto;\n  padding-top: 30px;\n`\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}